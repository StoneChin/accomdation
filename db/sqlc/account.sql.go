// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (
  account_id,
  password,
  salt,
  role
) VALUES (
  $1, $2, $3, $4
)
`

func (q *Queries) CreateAccount(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount)
}

const getAccount = `-- name: GetAccount :one
SELECT id, account_id, password, salt, role, is_new FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Password,
		&i.Salt,
		&i.Role,
		&i.IsNew,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, account_id, password, salt, role, is_new FROM accounts
ORDER BY id
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Password,
			&i.Salt,
			&i.Role,
			&i.IsNew,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
